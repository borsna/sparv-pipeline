from sparv import dateformat as sparv_dateformat

_dateformat_date_outformat = "%Y%m%d"
_dateformat_time_outformat = "%H%M%S"

# Set variables if not defined by user
try:
    dateformat
except NameError:
    dateformat = ""
try:
    datesplitter
except NameError:
    datesplitter = None
try:
    dateregex
except NameError:
    dateregex = None

rule _date:
    "Make date annotation for {file}."
    input:
        datefrom = "{file}.%s" % datefrom,
        dateto = "{file}.%s" % dateto,
    output:
        datefrom = "{file}.text.datefrom",
        dateto = "{file}.text.dateto"
    run:
        sparv_dateformat.dateformat(
            infrom=input.datefrom,
            into=input.dateto,
            outfrom=output.datefrom,
            outto=output.dateto,
            informat=dateformat,
            splitter=datesplitter,
            outformat=_dateformat_date_outformat,
            regex=dateregex
        )

rule _time:
    "Make date annotation for {file}."
    input:
        datefrom = "{file}.%s" % datefrom,
        dateto = "{file}.%s" % dateto,
    output:
        timefrom = "{file}.text.timefrom",
        timeto = "{file}.text.timeto"
    run:
        sparv_dateformat.dateformat(
            infrom=input.datefrom,
            into=input.dateto,
            outfrom=output.timefrom,
            outto=output.timeto,
            informat=dateformat,
            splitter=datesplitter,
            outformat=_dateformat_time_outformat,
            regex=dateregex
        )

rule datetime:
    "Make date and time annotations for all files."
    input:
        expand("%s/{file}.text.datefrom" % annotation_dir, file=input_files),
        expand("%s/{file}.text.dateto" % annotation_dir, file=input_files),
        expand("%s/{file}.text.timefrom" % annotation_dir, file=input_files),
        expand("%s/{file}.text.timeto" % annotation_dir, file=input_files)
