"""Some utility rules."""
import os
from pprint import pprint

from sparv import fileid

# Input file pattern
input_files = [f[1][0] for f in snakemake.utils.listfiles(os.path.join(source_dir, "{file}.xml"))]
input_filepaths = [f[0] for f in snakemake.utils.listfiles(os.path.join(source_dir, "{file}.xml"))]

################################################################################
# Convert lists to tuple lists
_existing_structural_elements = [(i, i.replace(":", ".")) if not isinstance(i, tuple) else i for i in existing_structural_elements]
_positional_annotations = [("token." + i, i) if not isinstance(i, tuple) else i for i in positional_annotations]
_structural_annotations = [(i, i.replace(".", ":")) if not isinstance(i, tuple) else i for i in structural_annotations]

################################################################################
# Set variables according to corpus specific config

if "saldo" in [i[1] for i in _positional_annotations]:
    _sense = "saldo"
    _saldo_ids = "saldo"
else:
    _sense = "sense_tmp"
    _saldo_ids = "sense"

# If compound analysis is omitted, do not create baseform_tmp
if any(x in [i[1] for i in _positional_annotations] for x in ["compwf", "complemgram"]):
    _baseform = "baseform_tmp"
else:
    _baseform = "baseform"

# Set analysis variable if not defined by user
allowed_analysis_modes = ["", "sv-1800", "fl", "tt"]
try:
    analysis
except NameError:
    analysis = ""
else:
    assert analysis in allowed_analysis_modes, "\n'%s' is not a valid analysis mode. \nPossible values: '%s' \n" % (analysis, "', '".join(allowed_analysis_modes))
################################################################################
# Auxiliary rules

rule files:
    "List all input files."
    run:
        print("\nInput files:\n")
        for f in input_files:
            print("  " + f)
        print()


rule clean:
    "Remove annotations and export files."
    run:
        shell("rm -rf %s" % annotation_dir)
        shell("rm -rf %s" % export_dir)

rule clean_export:
    "Remove export files."
    run:
        shell("rm -rf %s" % export_dir)

rule fileids:
    "Make file ID dictionary."
    params:
        input_filenames = " ".join(input_files),
    input:
        # Rebuild fileids when a new file is added to original dir
        input_filepaths
    output:
        os.path.join(annotation_dir, "fileids")
    run:
        snakemake.utils.makedirs(annotation_dir)
        fileid.fileid(
            out=output[0],
            files=params.input_filenames
        )

rule debug:
    "Print some variables for debugging."
    run:
        print("_existing_structural_elements:")
        pprint(_existing_structural_elements)
        print("\n_positional_annotations:")
        pprint(_positional_annotations)
        print("\n_structural_annotations:")
        pprint(_structural_annotations)
